@{
    //This is a Razor block. It allows an injection of C# code into the HTML. At runtime the C# code will be compilied down to HTML to be sent to the browswer.
    ViewBag.Title = "Home Page";
}

<h2>Intro to MVC</h2>
<p>
    In this course we will discuss the basics of MVC, its components, and how they function together to provide a web experience for our users. When this site was built we automatically added a reference to MVC which provided the site structure and default layout and pages. Later, we will change authentication, which will create impacts on the default code.
</p>
<h2>
    MVC Definition and Components
</h2>
<p>
    MVC is a design pattern architecture. It is a theory of how to build software applications. It stands for Model, View, Controller.
</p>
<ul>
    <li>
        Model: Model items are contained in the Models folder. Each model represents a business object for use in the aplication. Generally, the models in the UI layer are View Models (POCOs). Models in the data layer are Domain Models, which are built to <em>model</em> a table in a database, as well as to add metadata (data about data) for entity models (models built by an ORM)
    </li>
    <li>
        View: Views are contained in the Views folder. Views are the user interface for the application. They are how we display infor to and collect information from our user (Gets and Posts). There is a subfolder in the Views folder called Shared, which contains a file called _Layout.cshtml which is used to create a basic structure for the website. All dynamic content (each view) is rendered within the RenderBody() in the _Layout.
    </li>
    <li>
        Controller: Controllers are contained in the Controllers folder. The controller is the workhorse of the application, receiving requests to render forms, views, and data. It also handles the processing of forms, views, and data. Once complete, the specified controller's action will return the appropiate view to the user.
    </li>
</ul>
<h2>
    MVC Site Structure (Folders/Files)
</h2>
<p>
    The MVC site structure can be intimidating as you start with more files than you do for a simplel HTML project. However, all of those files have a specific use. Once you learn these, you will have a clear understanding of MVC and it's functionality.
</p>
<ul>
    <li>
        Typically, folders that start with a an underscore in their name are special folders designated by ASP.Net and should only be used for that functionality. 
    </li>
    <li>
        App_Data folder is used to house local databases. Typically, this folder will be empty in your applications.
    </li>
    <li>
        App_Start folder is used to house configuration classes for the application. The RouteConfig.cs defines the structure and default values for any routes in the application. This folder also contains a file called BundleConfig.cs that holds references to multiple items for CSSand JS references. This improves site efficiency but is not required. The reference to this page is located in the head of the _Layout.
    </li>
    <li>
        Content folder is used to hold files related to styles, such as images, stylesheets, and scripts associated with a template.
    </li>
    <li>
        Bin folder (hidden by default) holds all references to all of the used .Net namespaces, NuGet package downloads, and other projects in the solution.
    </li>
    <li>
        Views folder holds all of the UI components that are used by the end user. Each set of views is contained in a folder with the same name as the controler that they are called from. The Views folder also has a sub folder called Shared which contains the _Layout.
    </li>
    <li>
        Shared folder contains UI components that may be utilized by more than one view.  The most frequently used components in this folder are the _Layout, Error page, and LoginPartial that holds components for logging in and out of the website using membership (authentication).
    </li>
    <li>
        Global.asax is a C# file that manages global information for the website, such as session information, application information, error handling and redirecting, and registry of website components.
    </li>
    <li>
        Root web.config is written in XML and contains global information for the site, such as connections strings (connections to data structures), registering classes and namespaces for use, handling session timeouts, setting specific pages for redirect when specific error codes are returned, and more. It is tempermental, so spacing, spelling, and casing must be correct. 
    </li>
</ul>